/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FakeGameControllerInterface extends ethers.utils.Interface {
  functions: {
    "__callback(uint8[],uint256,uint256)": FunctionFragment;
    "acceptRandomNumberRequest(uint256)": FunctionFragment;
    "createRandomNumberRequest()": FunctionFragment;
    "getLastRequestId()": FunctionFragment;
    "getOracle()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "supportsIGame()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__callback",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptRandomNumberRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRandomNumberRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsIGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "__callback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptRandomNumberRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRandomNumberRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsIGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FakeGameController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FakeGameControllerInterface;

  functions: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createRandomNumberRequest(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRandomNumberRequest()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLastRequestId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLastRequestId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getOracle(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getOracle()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isOwner(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isOwner()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setOracle(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsIGame(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  __callback(
    cards: BigNumberish[],
    requestId: BigNumberish,
    bitCards: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__callback(uint8[],uint256,uint256)"(
    cards: BigNumberish[],
    requestId: BigNumberish,
    bitCards: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  acceptRandomNumberRequest(
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptRandomNumberRequest(uint256)"(
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createRandomNumberRequest(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRandomNumberRequest()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOracle(overrides?: CallOverrides): Promise<string>;

  "getOracle()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setOracle(
    oracleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    oracleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsIGame(overrides?: CallOverrides): Promise<boolean>;

  "supportsIGame()"(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createRandomNumberRequest(overrides?: CallOverrides): Promise<void>;

    "createRandomNumberRequest()"(overrides?: CallOverrides): Promise<void>;

    getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<string>;

    "getOracle()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setOracle(oracleAddress: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsIGame(overrides?: CallOverrides): Promise<boolean>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createRandomNumberRequest(overrides?: Overrides): Promise<BigNumber>;

    "createRandomNumberRequest()"(overrides?: Overrides): Promise<BigNumber>;

    getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setOracle(oracleAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsIGame(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createRandomNumberRequest(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRandomNumberRequest()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastRequestId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setOracle(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsIGame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
