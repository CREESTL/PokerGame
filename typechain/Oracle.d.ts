/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OracleInterface extends ethers.utils.Interface {
  functions: {
    "acceptRandomNumberRequest(uint256)": FunctionFragment;
    "createRandomNumberRequest()": FunctionFragment;
    "getGame()": FunctionFragment;
    "getOperatorAddress()": FunctionFragment;
    "getPendingRequests(uint256)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "publishRandomNumber(uint8[],address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGame(address)": FunctionFragment;
    "setOperatorAddress(address)": FunctionFragment;
    "supportsIOracle()": FunctionFragment;
    "toBit(uint8[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptRandomNumberRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRandomNumberRequest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOperatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishRandomNumber",
    values: [BigNumberish[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOperatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsIOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toBit",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptRandomNumberRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRandomNumberRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsIOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toBit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RandomNumberEvent(uint256,address,uint256)": EventFragment;
    "RandomNumberRequestEvent(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomNumberEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomNumberRequestEvent"): EventFragment;
}

export class Oracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OracleInterface;

  functions: {
    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createRandomNumberRequest(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRandomNumberRequest()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getGame(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGame()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getOperatorAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getOperatorAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPendingRequests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getPendingRequests(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOwner(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isOwner()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    publishRandomNumber(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "publishRandomNumber(uint8[],address,uint256)"(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setGame(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperatorAddress(
      operatorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperatorAddress(address)"(
      operatorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsIOracle(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "supportsIOracle()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    toBit(
      cards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "toBit(uint8[])"(
      cards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptRandomNumberRequest(
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptRandomNumberRequest(uint256)"(
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createRandomNumberRequest(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRandomNumberRequest()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getGame(overrides?: CallOverrides): Promise<string>;

  "getGame()"(overrides?: CallOverrides): Promise<string>;

  getOperatorAddress(overrides?: CallOverrides): Promise<string>;

  "getOperatorAddress()"(overrides?: CallOverrides): Promise<string>;

  getPendingRequests(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getPendingRequests(uint256)"(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  publishRandomNumber(
    cards: BigNumberish[],
    callerAddress: string,
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "publishRandomNumber(uint8[],address,uint256)"(
    cards: BigNumberish[],
    callerAddress: string,
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setGame(
    gameAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGame(address)"(
    gameAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperatorAddress(
    operatorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperatorAddress(address)"(
    operatorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsIOracle(overrides?: CallOverrides): Promise<boolean>;

  "supportsIOracle()"(overrides?: CallOverrides): Promise<boolean>;

  toBit(cards: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

  "toBit(uint8[])"(
    cards: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createRandomNumberRequest(overrides?: CallOverrides): Promise<BigNumber>;

    "createRandomNumberRequest()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGame(overrides?: CallOverrides): Promise<string>;

    "getGame()"(overrides?: CallOverrides): Promise<string>;

    getOperatorAddress(overrides?: CallOverrides): Promise<string>;

    "getOperatorAddress()"(overrides?: CallOverrides): Promise<string>;

    getPendingRequests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getPendingRequests(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    publishRandomNumber(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "publishRandomNumber(uint8[],address,uint256)"(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setGame(gameAddress: string, overrides?: CallOverrides): Promise<void>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorAddress(
      operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperatorAddress(address)"(
      operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsIOracle(overrides?: CallOverrides): Promise<boolean>;

    "supportsIOracle()"(overrides?: CallOverrides): Promise<boolean>;

    toBit(cards: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    "toBit(uint8[])"(
      cards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RandomNumberEvent(
      bitCards: null,
      callerAddress: string | null,
      requestId: BigNumberish | null
    ): EventFilter;

    RandomNumberRequestEvent(
      callerAddress: string | null,
      requestId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createRandomNumberRequest(overrides?: Overrides): Promise<BigNumber>;

    "createRandomNumberRequest()"(overrides?: Overrides): Promise<BigNumber>;

    getGame(overrides?: CallOverrides): Promise<BigNumber>;

    "getGame()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getOperatorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRequests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingRequests(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    publishRandomNumber(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "publishRandomNumber(uint8[],address,uint256)"(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setGame(gameAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperatorAddress(
      operatorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperatorAddress(address)"(
      operatorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsIOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsIOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    toBit(cards: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    "toBit(uint8[])"(
      cards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRandomNumberRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptRandomNumberRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createRandomNumberRequest(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRandomNumberRequest()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getGame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGame()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOperatorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRequests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingRequests(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishRandomNumber(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "publishRandomNumber(uint8[],address,uint256)"(
      cards: BigNumberish[],
      callerAddress: string,
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setGame(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperatorAddress(
      operatorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperatorAddress(address)"(
      operatorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsIOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsIOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBit(
      cards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toBit(uint8[])"(
      cards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
