/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPoolInterface extends ethers.utils.Interface {
  functions: {
    "addBetToPool(uint256)": FunctionFragment;
    "getOracleGasFee()": FunctionFragment;
    "getPoolAmount()": FunctionFragment;
    "jackpotDistribution(address)": FunctionFragment;
    "rewardDisribution(address,uint256)": FunctionFragment;
    "supportsIPool()": FunctionFragment;
    "updateJackpot(uint256)": FunctionFragment;
    "updateReferralStats(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBetToPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleGasFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jackpotDistribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDisribution",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsIPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateJackpot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralStats",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBetToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jackpotDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDisribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsIPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralStats",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPoolInterface;

  functions: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getOracleGasFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getOracleGasFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getPoolAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    jackpotDistribution(
      player: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsIPool(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateReferralStats(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateReferralStats(address,uint256,uint256)"(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addBetToPool(
    betAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addBetToPool(uint256)"(
    betAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getOracleGasFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getOracleGasFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  jackpotDistribution(
    player: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "jackpotDistribution(address)"(
    player: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardDisribution(
    player: string,
    prize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rewardDisribution(address,uint256)"(
    player: string,
    prize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsIPool(overrides?: CallOverrides): Promise<boolean>;

  "supportsIPool()"(overrides?: CallOverrides): Promise<boolean>;

  updateJackpot(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateJackpot(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateReferralStats(
    player: string,
    amount: BigNumberish,
    betEdge: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateReferralStats(address,uint256,uint256)"(
    player: string,
    amount: BigNumberish,
    betEdge: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOracleGasFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracleGasFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    jackpotDistribution(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsIPool(overrides?: CallOverrides): Promise<boolean>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<boolean>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferralStats(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateReferralStats(address,uint256,uint256)"(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getOracleGasFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracleGasFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    jackpotDistribution(
      player: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsIPool(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateReferralStats(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateReferralStats(address,uint256,uint256)"(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getOracleGasFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOracleGasFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jackpotDistribution(
      player: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsIPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateReferralStats(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateReferralStats(address,uint256,uint256)"(
      player: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
