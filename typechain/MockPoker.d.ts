/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockPokerInterface extends ethers.utils.Interface {
  functions: {
    "__callback(uint8[],uint256,uint256)": FunctionFragment;
    "_betColor()": FunctionFragment;
    "_betColorSquare()": FunctionFragment;
    "_betColorVariance()": FunctionFragment;
    "_betFlip()": FunctionFragment;
    "_betFlipSquare()": FunctionFragment;
    "_betFlipVariance()": FunctionFragment;
    "_gamesCounter()": FunctionFragment;
    "_maxBet()": FunctionFragment;
    "_poolController()": FunctionFragment;
    "checkCombinationResult(uint8[])": FunctionFragment;
    "determineWinnerPoker(uint8,int8[7],uint8,int8[7])": FunctionFragment;
    "evaluateHand(uint8[7],uint8[7])": FunctionFragment;
    "getColorResult(uint8[],uint256)": FunctionFragment;
    "getGameInfo(uint256)": FunctionFragment;
    "getLastGamePlayer()": FunctionFragment;
    "getLastRequestId()": FunctionFragment;
    "getMaxBet()": FunctionFragment;
    "getMyAddress()": FunctionFragment;
    "getOracle()": FunctionFragment;
    "getPoolController()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "maxBetCalc(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "play(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCards(uint8[])": FunctionFragment;
    "setMaxBet(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setPoolController(address)": FunctionFragment;
    "sort(uint8[7],uint8[7],uint256,uint256)": FunctionFragment;
    "sqrt(uint256)": FunctionFragment;
    "supportsIGame()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__callback",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_betColor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_betColorSquare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_betColorVariance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_betFlip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_betFlipSquare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_betFlipVariance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gamesCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_maxBet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_poolController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkCombinationResult",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "determineWinnerPoker",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateHand",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getColorResult",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastGamePlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMaxBet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxBetCalc",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPoolController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sort",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "sqrt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "supportsIGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "__callback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_betColor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_betColorSquare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_betColorVariance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_betFlip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_betFlipSquare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_betFlipVariance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gamesCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_maxBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_poolController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCombinationResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineWinnerPoker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluateHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColorResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastGamePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaxBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxBetCalc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaxBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sqrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsIGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "GameStart(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PokerResult(bool,uint8,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PokerResult"): EventFragment;
}

export class MockPoker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockPokerInterface;

  functions: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _betColor(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_betColor()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _betColorSquare(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_betColorSquare()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _betColorVariance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_betColorVariance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _betFlip(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_betFlip()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _betFlipSquare(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_betFlipSquare()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _betFlipVariance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_betFlipVariance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _gamesCounter(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_gamesCounter()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _maxBet(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "_maxBet()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _poolController(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "_poolController()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    checkCombinationResult(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: [number, number, number, number, number, number, number];
      2: BigNumber;
      3: [number, number, number, number, number, number, number];
      4: number;
    }>;

    "checkCombinationResult(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: [number, number, number, number, number, number, number];
      2: BigNumber;
      3: [number, number, number, number, number, number, number];
      4: number;
    }>;

    determineWinnerPoker(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "determineWinnerPoker(uint8,int8[7],uint8,int8[7])"(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    evaluateHand(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: [number, number, number, number, number, number, number];
    }>;

    "evaluateHand(uint8[7],uint8[7])"(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: [number, number, number, number, number, number, number];
    }>;

    getColorResult(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getColorResult(uint8[],uint256)"(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getGameInfo(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "getGameInfo(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    getLastGamePlayer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getLastGamePlayer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLastRequestId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLastRequestId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getMaxBet(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getMaxBet()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getMyAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getMyAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getOracle(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getOracle()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPoolController(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getPoolController()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isOwner(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isOwner()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    maxBetCalc(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "maxBetCalc(uint256,uint256)"(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    play(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "play(uint256,uint256)"(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setCards(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "setCards(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    setMaxBet(
      maxBet: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxBet(uint256)"(
      maxBet: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracle(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolController(
      poolControllerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolController(address)"(
      poolControllerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sort(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "sort(uint8[7],uint8[7],uint256,uint256)"(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      y: BigNumber;
      0: BigNumber;
    }>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      y: BigNumber;
      0: BigNumber;
    }>;

    supportsIGame(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  __callback(
    cards: BigNumberish[],
    requestId: BigNumberish,
    bitCards: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__callback(uint8[],uint256,uint256)"(
    cards: BigNumberish[],
    requestId: BigNumberish,
    bitCards: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _betColor(overrides?: CallOverrides): Promise<BigNumber>;

  "_betColor()"(overrides?: CallOverrides): Promise<BigNumber>;

  _betColorSquare(overrides?: CallOverrides): Promise<BigNumber>;

  "_betColorSquare()"(overrides?: CallOverrides): Promise<BigNumber>;

  _betColorVariance(overrides?: CallOverrides): Promise<BigNumber>;

  "_betColorVariance()"(overrides?: CallOverrides): Promise<BigNumber>;

  _betFlip(overrides?: CallOverrides): Promise<BigNumber>;

  "_betFlip()"(overrides?: CallOverrides): Promise<BigNumber>;

  _betFlipSquare(overrides?: CallOverrides): Promise<BigNumber>;

  "_betFlipSquare()"(overrides?: CallOverrides): Promise<BigNumber>;

  _betFlipVariance(overrides?: CallOverrides): Promise<BigNumber>;

  "_betFlipVariance()"(overrides?: CallOverrides): Promise<BigNumber>;

  _gamesCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "_gamesCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  _maxBet(overrides?: CallOverrides): Promise<BigNumber>;

  "_maxBet()"(overrides?: CallOverrides): Promise<BigNumber>;

  _poolController(overrides?: CallOverrides): Promise<string>;

  "_poolController()"(overrides?: CallOverrides): Promise<string>;

  checkCombinationResult(
    _cardsArray: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: [number, number, number, number, number, number, number];
    2: BigNumber;
    3: [number, number, number, number, number, number, number];
    4: number;
  }>;

  "checkCombinationResult(uint8[])"(
    _cardsArray: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: [number, number, number, number, number, number, number];
    2: BigNumber;
    3: [number, number, number, number, number, number, number];
    4: number;
  }>;

  determineWinnerPoker(
    playerHand: BigNumberish,
    playerKickers: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    computerHand: BigNumberish,
    computerKickers: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<number>;

  "determineWinnerPoker(uint8,int8[7],uint8,int8[7])"(
    playerHand: BigNumberish,
    playerKickers: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    computerHand: BigNumberish,
    computerKickers: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<number>;

  evaluateHand(
    cardsArray: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    ranksArray: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: [number, number, number, number, number, number, number];
  }>;

  "evaluateHand(uint8[7],uint8[7])"(
    cardsArray: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    ranksArray: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: [number, number, number, number, number, number, number];
  }>;

  getColorResult(
    colorCards: BigNumberish[],
    chosenColor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getColorResult(uint8[],uint256)"(
    colorCards: BigNumberish[],
    chosenColor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getGameInfo(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  "getGameInfo(uint256)"(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  getLastGamePlayer(overrides?: CallOverrides): Promise<string>;

  "getLastGamePlayer()"(overrides?: CallOverrides): Promise<string>;

  getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxBet()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMyAddress(overrides?: CallOverrides): Promise<string>;

  "getMyAddress()"(overrides?: CallOverrides): Promise<string>;

  getOracle(overrides?: CallOverrides): Promise<string>;

  "getOracle()"(overrides?: CallOverrides): Promise<string>;

  getPoolController(overrides?: CallOverrides): Promise<string>;

  "getPoolController()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  maxBetCalc(
    pokerB: BigNumberish,
    colorB: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "maxBetCalc(uint256,uint256)"(
    pokerB: BigNumberish,
    colorB: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  play(
    betColor: BigNumberish,
    chosenColor: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "play(uint256,uint256)"(
    betColor: BigNumberish,
    chosenColor: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setCards(
    _cardsArray: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<number>;

  "setCards(uint8[])"(
    _cardsArray: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<number>;

  setMaxBet(
    maxBet: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxBet(uint256)"(
    maxBet: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracle(
    oracleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    oracleAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolController(
    poolControllerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolController(address)"(
    poolControllerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sort(
    dataRanks: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    dataCards: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    low: BigNumberish,
    high: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "sort(uint8[7],uint8[7],uint256,uint256)"(
    dataRanks: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    dataCards: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    low: BigNumberish,
    high: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "sqrt(uint256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsIGame(overrides?: CallOverrides): Promise<boolean>;

  "supportsIGame()"(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _betColor(overrides?: CallOverrides): Promise<BigNumber>;

    "_betColor()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betColorSquare(overrides?: CallOverrides): Promise<BigNumber>;

    "_betColorSquare()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betColorVariance(overrides?: CallOverrides): Promise<BigNumber>;

    "_betColorVariance()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betFlip(overrides?: CallOverrides): Promise<BigNumber>;

    "_betFlip()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betFlipSquare(overrides?: CallOverrides): Promise<BigNumber>;

    "_betFlipSquare()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betFlipVariance(overrides?: CallOverrides): Promise<BigNumber>;

    "_betFlipVariance()"(overrides?: CallOverrides): Promise<BigNumber>;

    _gamesCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "_gamesCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxBet(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxBet()"(overrides?: CallOverrides): Promise<BigNumber>;

    _poolController(overrides?: CallOverrides): Promise<string>;

    "_poolController()"(overrides?: CallOverrides): Promise<string>;

    checkCombinationResult(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: [number, number, number, number, number, number, number];
      2: BigNumber;
      3: [number, number, number, number, number, number, number];
      4: number;
    }>;

    "checkCombinationResult(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: [number, number, number, number, number, number, number];
      2: BigNumber;
      3: [number, number, number, number, number, number, number];
      4: number;
    }>;

    determineWinnerPoker(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<number>;

    "determineWinnerPoker(uint8,int8[7],uint8,int8[7])"(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<number>;

    evaluateHand(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: [number, number, number, number, number, number, number];
    }>;

    "evaluateHand(uint8[7],uint8[7])"(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: [number, number, number, number, number, number, number];
    }>;

    getColorResult(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getColorResult(uint8[],uint256)"(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getGameInfo(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "getGameInfo(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    getLastGamePlayer(overrides?: CallOverrides): Promise<string>;

    "getLastGamePlayer()"(overrides?: CallOverrides): Promise<string>;

    getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxBet()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMyAddress(overrides?: CallOverrides): Promise<string>;

    "getMyAddress()"(overrides?: CallOverrides): Promise<string>;

    getOracle(overrides?: CallOverrides): Promise<string>;

    "getOracle()"(overrides?: CallOverrides): Promise<string>;

    getPoolController(overrides?: CallOverrides): Promise<string>;

    "getPoolController()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    maxBetCalc(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "maxBetCalc(uint256,uint256)"(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    play(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "play(uint256,uint256)"(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setCards(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<number>;

    "setCards(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<number>;

    setMaxBet(maxBet: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxBet(uint256)"(
      maxBet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(oracleAddress: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolController(
      poolControllerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolController(address)"(
      poolControllerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sort(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sort(uint8[7],uint8[7],uint256,uint256)"(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsIGame(overrides?: CallOverrides): Promise<boolean>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    GameStart(player: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PokerResult(
      winColor: null,
      winPoker: null,
      requestId: null,
      cards: null,
      player: null
    ): EventFilter;
  };

  estimateGas: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _betColor(overrides?: CallOverrides): Promise<BigNumber>;

    "_betColor()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betColorSquare(overrides?: CallOverrides): Promise<BigNumber>;

    "_betColorSquare()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betColorVariance(overrides?: CallOverrides): Promise<BigNumber>;

    "_betColorVariance()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betFlip(overrides?: CallOverrides): Promise<BigNumber>;

    "_betFlip()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betFlipSquare(overrides?: CallOverrides): Promise<BigNumber>;

    "_betFlipSquare()"(overrides?: CallOverrides): Promise<BigNumber>;

    _betFlipVariance(overrides?: CallOverrides): Promise<BigNumber>;

    "_betFlipVariance()"(overrides?: CallOverrides): Promise<BigNumber>;

    _gamesCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "_gamesCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxBet(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxBet()"(overrides?: CallOverrides): Promise<BigNumber>;

    _poolController(overrides?: CallOverrides): Promise<BigNumber>;

    "_poolController()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkCombinationResult(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkCombinationResult(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    determineWinnerPoker(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "determineWinnerPoker(uint8,int8[7],uint8,int8[7])"(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evaluateHand(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "evaluateHand(uint8[7],uint8[7])"(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getColorResult(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getColorResult(uint8[],uint256)"(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameInfo(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGameInfo(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastGamePlayer(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastGamePlayer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBet(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxBet()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getMyAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolController(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolController()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxBetCalc(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "maxBetCalc(uint256,uint256)"(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "play(uint256,uint256)"(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setCards(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setCards(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMaxBet(maxBet: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMaxBet(uint256)"(
      maxBet: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracle(oracleAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolController(
      poolControllerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolController(address)"(
      poolControllerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sort(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sort(uint8[7],uint8[7],uint256,uint256)"(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsIGame(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __callback(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__callback(uint8[],uint256,uint256)"(
      cards: BigNumberish[],
      requestId: BigNumberish,
      bitCards: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _betColor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_betColor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _betColorSquare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_betColorSquare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _betColorVariance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_betColorVariance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _betFlip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_betFlip()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _betFlipSquare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_betFlipSquare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _betFlipVariance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_betFlipVariance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _gamesCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_gamesCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_maxBet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _poolController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_poolController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkCombinationResult(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkCombinationResult(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    determineWinnerPoker(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "determineWinnerPoker(uint8,int8[7],uint8,int8[7])"(
      playerHand: BigNumberish,
      playerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      computerHand: BigNumberish,
      computerKickers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evaluateHand(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "evaluateHand(uint8[7],uint8[7])"(
      cardsArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      ranksArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getColorResult(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getColorResult(uint8[],uint256)"(
      colorCards: BigNumberish[],
      chosenColor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameInfo(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGameInfo(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastGamePlayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastGamePlayer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastRequestId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMaxBet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMyAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBetCalc(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "maxBetCalc(uint256,uint256)"(
      pokerB: BigNumberish,
      colorB: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "play(uint256,uint256)"(
      betColor: BigNumberish,
      chosenColor: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setCards(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setCards(uint8[])"(
      _cardsArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxBet(
      maxBet: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxBet(uint256)"(
      maxBet: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      oracleAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolController(
      poolControllerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolController(address)"(
      poolControllerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sort(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sort(uint8[7],uint8[7],uint256,uint256)"(
      dataRanks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      dataCards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      low: BigNumberish,
      high: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsIGame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsIGame()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
