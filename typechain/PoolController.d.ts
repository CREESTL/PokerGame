/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolControllerInterface extends ethers.utils.Interface {
  functions: {
    "addBetToPool(uint256)": FunctionFragment;
    "addRef(address,address)": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "canWithdraw(uint256)": FunctionFragment;
    "deposit(address)": FunctionFragment;
    "getBonusPercentMilestones()": FunctionFragment;
    "getGame()": FunctionFragment;
    "getJackpot()": FunctionFragment;
    "getJackpotLimit()": FunctionFragment;
    "getOracleGasFee()": FunctionFragment;
    "getOracleOperator()": FunctionFragment;
    "getPoolAmount()": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "getReferralStats(address)": FunctionFragment;
    "getTotalWinningsMilestones()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "jackpotDistribution(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardDisribution(address,uint256)": FunctionFragment;
    "setBonusPercentMilestones(uint256[])": FunctionFragment;
    "setGame(address)": FunctionFragment;
    "setJackpot(uint256)": FunctionFragment;
    "setJackpotLimit(uint256)": FunctionFragment;
    "setOracleGasFee(uint256)": FunctionFragment;
    "setOracleOperator(address)": FunctionFragment;
    "setTotalWinningsMilestones(uint256[])": FunctionFragment;
    "supportsIPool()": FunctionFragment;
    "takeOracleFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateJackpot(uint256)": FunctionFragment;
    "updateReferralStats(address,uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawReferralEarnings(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBetToPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRef",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBonusPercentMilestones",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJackpotLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleGasFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWinningsMilestones",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "jackpotDistribution",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDisribution",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusPercentMilestones",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setJackpot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setJackpotLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleGasFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalWinningsMilestones",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsIPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeOracleFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJackpot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralStats",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReferralEarnings",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBetToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBonusPercentMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJackpot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJackpotLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWinningsMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jackpotDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDisribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBonusPercentMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setJackpot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setJackpotLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalWinningsMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsIPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeOracleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReferralEarnings",
    data: BytesLike
  ): Result;

  events: {
    "JackpotWin(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisteredReferer(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JackpotWin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredReferer"): EventFragment;
}

export class PoolController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolControllerInterface;

  functions: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addRef(
      parent: string,
      son: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRef(address,address)"(
      parent: string,
      son: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addToWhitelist(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToWhitelist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "canWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deposit(
      _to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(address)"(
      _to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getBonusPercentMilestones(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getBonusPercentMilestones()"(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    getGame(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGame()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getJackpot(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getJackpot()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getJackpotLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getJackpotLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getOracleGasFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getOracleGasFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getOracleOperator(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getOracleOperator()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPoolAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getPoolInfo(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getReferralStats(
      referee: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "getReferralStats(address)"(
      referee: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getTotalWinningsMilestones(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getTotalWinningsMilestones()"(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    isOwner(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isOwner()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    jackpotDistribution(
      player: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    removeFromWhitelist(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFromWhitelist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBonusPercentMilestones(
      newBonusPercent: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBonusPercentMilestones(uint256[])"(
      newBonusPercent: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGame(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setJackpot(
      jackpot: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setJackpot(uint256)"(
      jackpot: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setJackpotLimit(
      jackpotLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setJackpotLimit(uint256)"(
      jackpotLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracleGasFee(
      oracleGasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracleGasFee(uint256)"(
      oracleGasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracleOperator(
      oracleOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracleOperator(address)"(
      oracleOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTotalWinningsMilestones(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTotalWinningsMilestones(uint256[])"(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsIPool(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    takeOracleFee(overrides?: Overrides): Promise<ContractTransaction>;

    "takeOracleFee()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateReferralStats(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateReferralStats(address,uint256,uint256)"(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawReferralEarnings(
      player: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawReferralEarnings(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addBetToPool(
    betAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addBetToPool(uint256)"(
    betAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addRef(
    parent: string,
    son: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRef(address,address)"(
    parent: string,
    son: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addToWhitelist(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addToWhitelist(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canWithdraw(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "canWithdraw(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(address)"(
    _to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getBonusPercentMilestones(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  "getBonusPercentMilestones()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getGame(overrides?: CallOverrides): Promise<string>;

  "getGame()"(overrides?: CallOverrides): Promise<string>;

  getJackpot(overrides?: CallOverrides): Promise<BigNumber>;

  "getJackpot()"(overrides?: CallOverrides): Promise<BigNumber>;

  getJackpotLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getJackpotLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOracleGasFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getOracleGasFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOracleOperator(overrides?: CallOverrides): Promise<string>;

  "getOracleOperator()"(overrides?: CallOverrides): Promise<string>;

  getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolInfo(overrides?: CallOverrides): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "getPoolInfo()"(overrides?: CallOverrides): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  getReferralStats(
    referee: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "getReferralStats(address)"(
    referee: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getTotalWinningsMilestones(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  "getTotalWinningsMilestones()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  jackpotDistribution(
    player: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "jackpotDistribution(address)"(
    player: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeFromWhitelist(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFromWhitelist(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardDisribution(
    player: string,
    prize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rewardDisribution(address,uint256)"(
    player: string,
    prize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBonusPercentMilestones(
    newBonusPercent: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBonusPercentMilestones(uint256[])"(
    newBonusPercent: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGame(
    gameAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGame(address)"(
    gameAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setJackpot(
    jackpot: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setJackpot(uint256)"(
    jackpot: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setJackpotLimit(
    jackpotLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setJackpotLimit(uint256)"(
    jackpotLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracleGasFee(
    oracleGasFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracleGasFee(uint256)"(
    oracleGasFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracleOperator(
    oracleOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracleOperator(address)"(
    oracleOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTotalWinningsMilestones(
    newTotalWinningMilestones: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTotalWinningsMilestones(uint256[])"(
    newTotalWinningMilestones: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsIPool(overrides?: CallOverrides): Promise<boolean>;

  "supportsIPool()"(overrides?: CallOverrides): Promise<boolean>;

  takeOracleFee(overrides?: Overrides): Promise<ContractTransaction>;

  "takeOracleFee()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateJackpot(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateJackpot(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateReferralStats(
    referral: string,
    amount: BigNumberish,
    betEdge: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateReferralStats(address,uint256,uint256)"(
    referral: string,
    amount: BigNumberish,
    betEdge: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawReferralEarnings(
    player: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawReferralEarnings(address)"(
    player: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRef(
      parent: string,
      son: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRef(address,address)"(
      parent: string,
      son: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToWhitelist(account: string, overrides?: CallOverrides): Promise<void>;

    "addToWhitelist(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(_to: string, overrides?: CallOverrides): Promise<void>;

    "deposit(address)"(_to: string, overrides?: CallOverrides): Promise<void>;

    getBonusPercentMilestones(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getBonusPercentMilestones()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getGame(overrides?: CallOverrides): Promise<string>;

    "getGame()"(overrides?: CallOverrides): Promise<string>;

    getJackpot(overrides?: CallOverrides): Promise<BigNumber>;

    "getJackpot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getJackpotLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getJackpotLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleGasFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracleGasFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleOperator(overrides?: CallOverrides): Promise<string>;

    "getOracleOperator()"(overrides?: CallOverrides): Promise<string>;

    getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getReferralStats(
      referee: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "getReferralStats(address)"(
      referee: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getTotalWinningsMilestones(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getTotalWinningsMilestones()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    jackpotDistribution(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeFromWhitelist(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFromWhitelist(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBonusPercentMilestones(
      newBonusPercent: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setBonusPercentMilestones(uint256[])"(
      newBonusPercent: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setGame(gameAddress: string, overrides?: CallOverrides): Promise<void>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setJackpot(jackpot: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setJackpot(uint256)"(
      jackpot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setJackpotLimit(
      jackpotLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setJackpotLimit(uint256)"(
      jackpotLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleGasFee(
      oracleGasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleGasFee(uint256)"(
      oracleGasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleOperator(
      oracleOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleOperator(address)"(
      oracleOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalWinningsMilestones(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTotalWinningsMilestones(uint256[])"(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsIPool(overrides?: CallOverrides): Promise<boolean>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<boolean>;

    takeOracleFee(overrides?: CallOverrides): Promise<void>;

    "takeOracleFee()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferralStats(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateReferralStats(address,uint256,uint256)"(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReferralEarnings(
      player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawReferralEarnings(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    JackpotWin(player: null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RegisteredReferer(referee: null, referral: null): EventFilter;
  };

  estimateGas: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addRef(
      parent: string,
      son: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRef(address,address)"(
      parent: string,
      son: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addToWhitelist(account: string, overrides?: Overrides): Promise<BigNumber>;

    "addToWhitelist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(_to: string, overrides?: PayableOverrides): Promise<BigNumber>;

    "deposit(address)"(
      _to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getBonusPercentMilestones(overrides?: CallOverrides): Promise<BigNumber>;

    "getBonusPercentMilestones()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGame(overrides?: CallOverrides): Promise<BigNumber>;

    "getGame()"(overrides?: CallOverrides): Promise<BigNumber>;

    getJackpot(overrides?: CallOverrides): Promise<BigNumber>;

    "getJackpot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getJackpotLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getJackpotLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleGasFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracleGasFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleOperator(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracleOperator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReferralStats(
      referee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReferralStats(address)"(
      referee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWinningsMilestones(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalWinningsMilestones()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    jackpotDistribution(
      player: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeFromWhitelist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBonusPercentMilestones(
      newBonusPercent: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBonusPercentMilestones(uint256[])"(
      newBonusPercent: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGame(gameAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setJackpot(
      jackpot: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setJackpot(uint256)"(
      jackpot: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setJackpotLimit(
      jackpotLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setJackpotLimit(uint256)"(
      jackpotLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracleGasFee(
      oracleGasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOracleGasFee(uint256)"(
      oracleGasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracleOperator(
      oracleOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOracleOperator(address)"(
      oracleOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTotalWinningsMilestones(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTotalWinningsMilestones(uint256[])"(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsIPool(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    takeOracleFee(overrides?: Overrides): Promise<BigNumber>;

    "takeOracleFee()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateReferralStats(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateReferralStats(address,uint256,uint256)"(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawReferralEarnings(
      player: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawReferralEarnings(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBetToPool(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addBetToPool(uint256)"(
      betAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addRef(
      parent: string,
      son: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRef(address,address)"(
      parent: string,
      son: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToWhitelist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(address)"(
      _to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getBonusPercentMilestones(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBonusPercentMilestones()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGame()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJackpot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getJackpot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJackpotLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getJackpotLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleGasFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOracleGasFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOracleOperator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReferralStats(
      referee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReferralStats(address)"(
      referee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalWinningsMilestones(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalWinningsMilestones()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jackpotDistribution(
      player: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "jackpotDistribution(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFromWhitelist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardDisribution(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rewardDisribution(address,uint256)"(
      player: string,
      prize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBonusPercentMilestones(
      newBonusPercent: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBonusPercentMilestones(uint256[])"(
      newBonusPercent: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGame(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGame(address)"(
      gameAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setJackpot(
      jackpot: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setJackpot(uint256)"(
      jackpot: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setJackpotLimit(
      jackpotLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setJackpotLimit(uint256)"(
      jackpotLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracleGasFee(
      oracleGasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracleGasFee(uint256)"(
      oracleGasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracleOperator(
      oracleOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracleOperator(address)"(
      oracleOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTotalWinningsMilestones(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTotalWinningsMilestones(uint256[])"(
      newTotalWinningMilestones: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsIPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsIPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeOracleFee(overrides?: Overrides): Promise<PopulatedTransaction>;

    "takeOracleFee()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateJackpot(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateJackpot(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateReferralStats(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateReferralStats(address,uint256,uint256)"(
      referral: string,
      amount: BigNumberish,
      betEdge: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawReferralEarnings(
      player: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawReferralEarnings(address)"(
      player: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
